{"version":3,"file":"static/webpack/static\\development\\pages\\coursemap\\module\\lesson.js.9c7c8f9d78204f92ee2e.hot-update.js","sources":["webpack:///./src/Components/JournalInput.tsx"],"sourcesContent":["'use strict';\r\n\r\nimport * as React from 'react';\r\nimport { debounce } from 'lodash';\r\n\r\nimport LoadSpinner from '@Components/LoadSpinner'\r\nimport { StarIcon } from '@Components/Icons'\r\nimport Rating from 'react-rating';\r\n\r\ntype onSaveJournalInputArgs = {\r\n  value: string,\r\n  question: string,\r\n  tag: number\r\n}\r\n\r\ntype JournalInputProps= {\r\n  label: string\r\n  name: string,\r\n  tag: number,\r\n  type: string,\r\n  showLabel?: boolean,\r\n  value: string,\r\n  onSaveJournalInput: ({}:onSaveJournalInputArgs, callback: () => any) => any\r\n}\r\n\r\ntype JournalInputState= {\r\n  value: string,\r\n  isSavingInput: boolean\r\n}\r\n\r\n/**\r\n * Journal Input\r\n */\r\nexport class JournalInput extends React.Component<JournalInputProps, JournalInputState> {\r\n  state:JournalInputState = {\r\n    value: '',\r\n    isSavingInput: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    onSaveJournalInput: () => {}\r\n  }\r\n\r\n  constructor (props: JournalInputProps) {\r\n    super(props)\r\n    this.handleJournalInputChange = this.handleJournalInputChange.bind(this)\r\n    this.handleJournalRatingChange = this.handleJournalRatingChange.bind(this)\r\n    this._makeRequest = debounce(this._makeRequest, 1000)\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { value, type } = this.props;\r\n\r\n    let val = value === '' && type === 'rating' ? '0' : value\r\n\r\n    this.setState({\r\n      value: val\r\n    })\r\n  }\r\n\r\n  renderRating(label:string, value:string):React.ReactNode {\r\n    return (\r\n      <div className={'d-flex align-items-center'}>\r\n        <section style={{ width: '70%' }} className={'mr-1'}>{label}</section>\r\n        <section style={{ width: '30%' }}>\r\n          <Rating\r\n            initialRating={parseInt(value)}\r\n            emptySymbol={<StarIcon />}\r\n            fullSymbol={<StarIcon fill=\"yellow\" />}\r\n            onChange={this.handleJournalRatingChange}\r\n          />\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleJournalRatingChange(rate:number) {\r\n    const value = `${rate}`;\r\n\r\n    this.setState({ value })\r\n    this._makeRequest(value)\r\n  }\r\n\r\n  handleJournalInputChange(e:React.ChangeEvent<(HTMLTextAreaElement|HTMLInputElement)>):void {\r\n    const { type, value } = e.currentTarget;\r\n\r\n    let newValue;\r\n\r\n    if (type === 'checkbox') {\r\n      newValue = value === 'on' ? 'off': 'on';\r\n    } else {\r\n      newValue = value;\r\n    }\r\n\r\n    this.setState({ value: newValue })\r\n    this._makeRequest(newValue);\r\n  }\r\n\r\n  _toggleSavingState() {\r\n    this.setState(({ isSavingInput }) => {\r\n      return {\r\n        isSavingInput: !isSavingInput\r\n      }\r\n    })\r\n  }\r\n\r\n  _makeRequest(value:string) {\r\n    const { onSaveJournalInput, tag, label } = this.props;\r\n\r\n    this._toggleSavingState()\r\n\r\n    onSaveJournalInput({ value, tag, question: label }, () => {\r\n      this._toggleSavingState()\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      label,\r\n      name,\r\n      type,\r\n      tag,\r\n      showLabel\r\n    } = this.props;\r\n    const { isSavingInput, value } = this.state;\r\n\r\n    if (type === 'rating') return this.renderRating(label, value);\r\n\r\n    const remainingInputProps = {\r\n      onChange: this.handleJournalInputChange,\r\n      name: name\r\n    };\r\n    const inputTypes:{ [type: string]: any } = {\r\n      'input': <input value={value} {...remainingInputProps} className={'form-control-line w-100'} />,\r\n      'textarea': <textarea value={value} placeholder={'Please fill this'} {...remainingInputProps} className={'form-control d-block w-100'} />,\r\n      'checkbox': <input type=\"checkbox\" id={`journal-checkbox-${tag}`} value={value} checked={value === 'on'} {...remainingInputProps} className={'styled-checkbox'} />,\r\n    }\r\n    \r\n    return (\r\n      <div className={'form-group'}>\r\n        {(showLabel && type !== 'checkbox') &&\r\n        <label className={'label d-flex align-items-center'} style={{ fontSize: '90%' }}>\r\n          <span className={'mr-2'}>{label}</span>\r\n          {isSavingInput && <LoadSpinner width={'16px'} height={'16px'} color={'#77b02a'} />}\r\n        </label>}\r\n        {inputTypes[type]}\r\n        {(showLabel && type === 'checkbox') && <label htmlFor={`journal-checkbox-${tag}`}>{label}</label>}\r\n      </div>\r\n    )\r\n  }\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAsBA;;;AAGA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AARA;AACA;AAFA;AACA;AAUA;AACA;AACA;AAJA;AAKA;AACA;AAhBA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAGA;AAEA;AACA;AADA;AAGA;AAzBA;AAAA;AAAA;AA4BA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AASA;AAzCA;AAAA;AAAA;AA4CA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAhDA;AAAA;AAAA;AAkDA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AA/DA;AAAA;AAAA;AAkEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAvEA;AAAA;AAAA;AAyEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAjFA;AAAA;AAAA;AAmFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AApHA;AACA;AADA;AAAA;AACA;AADA;AAOA;AADA;;;;A","sourceRoot":""}