{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.b8c2c171d9031744e073.hot-update.js","sources":["webpack:///./src/Actions/AppActions.ts"],"sourcesContent":["import { normalize, schema } from 'normalizr';\r\n\r\nimport { Dispatch } from 'redux';\r\nimport { ActionConsts } from \"@Definations\";\r\n\r\nconst feedbackSchema = new schema.Entity('feedback', {}, {\r\n  idAttribute: 'feedback_id'\r\n});\r\n\r\n/**\r\n * ACTIONS\r\n*/\r\nexport const AppActions = {\r\n\tMap : (payload:any) => ({\r\n\t\tpayload,\r\n\t\ttype: ActionConsts.App.SetReducer\r\n\t}),\r\n\r\n\tReset : () => ({\r\n\t\ttype: ActionConsts.App.ResetReducer\r\n\t}),\r\n\r\n\tcreateJournalFeedback : (payload:any, callback:Function) => {\r\n    return ((dispatch:Dispatch, {}, api:any) => {\t\t\t\r\n      return api.createJournalFeedback(payload)\r\n        .then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then((response:any) => { \r\n          return callback(response)\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n  },\r\n\r\n  getJournalFeedback : (payload:any, callback:Function) => {\r\n    const { course_id, module_id, lesson_id } = payload;\r\n\r\n    return ((dispatch:Dispatch, getState:any, api:any) => {\t\t\t\r\n      return api.getJournalFeedback(payload)\r\n        .then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then((response:any) => {\r\n          const { entities: { feedback }}= normalize(response, [feedbackSchema]);\r\n\r\n          let newCoursemapModuleFeedback = {\r\n            [course_id]: {\r\n              [module_id]: {\r\n                [lesson_id]: feedback\r\n              }\r\n            }\r\n          }\r\n\r\n          dispatch(AppActions.Map({\r\n            coursemapModulesFeedback: {\r\n              ...getState().app.coursemapModulesFeedback,\r\n              ...newCoursemapModuleFeedback\r\n            }\r\n          }))\r\n\r\n          callback({\r\n            ...getState().app.coursemapModulesFeedback,\r\n            ...newCoursemapModuleFeedback\r\n          })\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n  },\r\n\r\n\tupdateUserLesson : (payload:any, callback:Function) => {\r\n    return ((dispatch:Dispatch, {}, api:any) => {\r\n\t\t\tdispatch(AppActions.Map({ isUpdatingUserLesson: true }))\r\n\t\t\t\r\n      return api.updateUserLesson(payload)\r\n        .then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then((response:any) => { \r\n          dispatch(AppActions.Map({\r\n            isUpdatingUserLesson: false,\r\n          }))\r\n\r\n          return callback(response)\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n  },\r\n\r\n\tgetUserLessons : (payload:any, callback:Function) => {\r\n    return ((dispatch:Dispatch, {}, api:any) => {\t\t\t\r\n      return api.getUserLessons(payload)\r\n        .then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then((response:any) => { \r\n          return callback(response)\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n  },\r\n\r\n\tgetUserModules : (payload:any, callback:Function) => {\r\n    return ((dispatch:Dispatch, {}, api:any) => {\t\t\t\r\n      return api.getUserModules(payload)\r\n        .then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then((response:any) => { \r\n          return callback(response)\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n  },\r\n\r\n\tfetchCoursemapModule : (payload:any, coursemapModulesContent:any) => {\r\n    const { module, id, course } = payload;\r\n\r\n    return ((dispatch:Dispatch, {}, api:any) => {\t\r\n      dispatch(AppActions.Map({ isFetchingCoursemapModule: true }))\r\n      \t\t\r\n      return api.fetchCoursemapModule(payload)\r\n        .then(api.checkStatus)\r\n        .then((response: any) => response.text())\r\n        .then((response:any) => { \r\n          let newCoursemapModule = {\r\n            [course]: {\r\n              [module]: {\r\n                content: response\r\n              }\r\n            }\r\n          }\r\n\r\n          if (id) {\r\n            newCoursemapModule = {\r\n              [course]: {\r\n                [module]: {\r\n                  ...coursemapModulesContent[module],\r\n                  [id]: {\r\n                    content: response\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n      \r\n          dispatch(AppActions.Map({\r\n            isFetchingCoursemapModule: false,\r\n            coursemapModulesContent: {\r\n              ...coursemapModulesContent,\r\n              ...newCoursemapModule\r\n            }\r\n          })\r\n        )\r\n      })\r\n    })\r\n  },\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAEA;AACA;AADA;AAIA;;;;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AAAA;AACA;AAEA;AACA;AAOA;AACA;AADA;AAOA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAGA;AADA;AACA;AAKA;AACA;AAKA;AADA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAQA;AACA;AACA;AA3IA;;;;A","sourceRoot":""}