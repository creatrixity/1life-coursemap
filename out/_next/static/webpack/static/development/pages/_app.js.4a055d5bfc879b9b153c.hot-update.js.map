{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.4a055d5bfc879b9b153c.hot-update.js","sources":["webpack:///./src/Redux/api.ts"],"sourcesContent":["import { Dispatch } from 'redux';\r\nimport { AppActions } from '@Actions';\r\nimport fetch from 'isomorphic-fetch';\r\nimport * as utils from './utils'\r\n\r\nconst hostAddress = 'http://localhost:3333/api';\r\n\r\nfunction prefixHostAddress (url:string) {\r\n  return `${hostAddress}${url}`;\r\n}\r\n\r\n/**\r\n * Creates a user http request.\r\n */\r\nfunction createUser (user:Object) {\r\n  return fetch(prefixHostAddress('/v1/register'), {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(user)\r\n  })\r\n}\r\n\r\n/**\r\n * Updates a user module.\r\n */\r\nfunction updateUserModule (payload:Object) {\r\n  return fetch(prefixHostAddress('/v1/modules/updateUserModule'), {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${utils.getToken()}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a user http request.\r\n */\r\nfunction updateUserLesson (payload:Object) {\r\n  return fetch(prefixHostAddress('/v1/modules/updateUserLesson'), {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${utils.getToken()}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a user http request.\r\n */\r\nfunction getUserLessons (payload:Object) {\r\n  return fetch(prefixHostAddress('/v1/modules/getUserLessons'), {\r\n    method: 'post',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${utils.getToken()}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a user http request.\r\n */\r\nfunction getUserModules (payload:Object) {\r\n  return fetch(prefixHostAddress('/v1/modules/getUserModules'), {\r\n    method: 'post',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${utils.getToken()}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  })\r\n}\r\n\r\n/**\r\n * Fetches Roadmap Data\r\n */\r\nfunction fetchRoadmapModule (payload:Object) {\r\n  return fetch(prefixHostAddress('/v1/getModuleData'), {\r\n    method: 'post',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${utils.getToken()}`\r\n    },\r\n    body: JSON.stringify(payload)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a user http request.\r\n */\r\nfunction authenticateUser (user:Object) {\r\n  return fetch(prefixHostAddress('/v1/login'), {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(user)\r\n  })\r\n}\r\n\r\n/**\r\n * Checks the status of a request.\r\n * \r\n * @param {Object} response\r\n */\r\nfunction checkStatus (response:any) {\r\n  if (response.status >= 200 && response.status < 401) {\r\n    return Promise.resolve(response);\r\n  } else {\r\n    return Promise.reject(response);\r\n  }\r\n}\r\n\r\n/**\r\n * Sets an auth token.\r\n * \r\n * @param {Object<Response>} response\r\n * @return {Object<Response>}\r\n */\r\nfunction setToken (response:any) {\r\n  if (response.credentials) {\r\n    localStorage.setItem('token', JSON.stringify({ token: response.credentials.token }));\r\n    localStorage.setItem('refreshToken', JSON.stringify({ refreshToken: response.credentials.refreshToken }));\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\n/**\r\n * Sets the auth user.\r\n * \r\n * @param {Object<Response>} response\r\n * @return {Object<Response>}\r\n */\r\nfunction setUser (response:any) {\r\n  if (response.user) {\r\n    localStorage.setItem('user', JSON.stringify({ user: response.user }));\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\n/**\r\n * Checks the status of a request.\r\n * \r\n * @param {Object} response\r\n */\r\nfunction errorHandler (dispatch:Dispatch, e:any) {\r\n  alert('Sorry, we encountered an error trying to process your request. Please try again.');\r\n\r\n  dispatch(AppActions.Map({\r\n    hasRequestError: true\r\n  }))\r\n}\r\n\r\nfunction toJSON(response:any) {\r\n  return response.json();\r\n}\r\n\r\nexport default {\r\n  authenticateUser,\r\n  createUser,\r\n  checkStatus,\r\n  errorHandler,\r\n  fetchRoadmapModule,\r\n  getUserLessons,\r\n  getUserModules,\r\n  setToken,\r\n  setUser,\r\n  toJSON,\r\n  updateUserModule,\r\n  updateUserLesson,\r\n}"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;;;A","sourceRoot":""}