{"version":3,"file":"static/webpack/static\\development\\pages\\courses\\course\\module.js.cac365b8901353bb0b13.hot-update.js","sources":["webpack:///./src/Helpers/index.ts"],"sourcesContent":["'use strict';\r\n\r\nvar toSlug = require('slugify')\r\n\r\n/**\r\n * Functional programming utility that passes a series of arguments\r\n * one at a time to a series of functions.\r\n * \r\n * @param {Array<Function>} fns - Functions to receive argument fixtures\r\n * @param {Any} x - The fixed argument to be supplied\r\n * @return {Function} - Receives the fixed argument to be processed.\r\n */\r\nconst compose = (...fns:Function[]) => (x:any) => fns.reduceRight((prev, fn) => fn(prev), x)\r\n\r\n/**\r\n * CPM is short for CallPrototypeMethod.\r\n * It invokes the provided method on the arg object's prototype\r\n */\r\nconst cpm = (method:string, ...methodArgs:any) => (arg:any) => arg[method](methodArgs)\r\n\r\n/**\r\n * Calculates the level of progression within a module.\r\n * \r\n * @param {Array<Object>} lessons \r\n * @param {Number} lessonsCount \r\n */\r\nfunction computeModulesProgression (lessons:[], lessonsCount:number) {\r\n  const totalProgressions = lessons.reduce((previousTotalProgression:any, currentLesson:any) => {\r\n    return (previousTotalProgression) + currentLesson.progression\r\n  }, 0);\r\n  \r\n  const total = totalProgressions / lessonsCount;\r\n  return total === Infinity ? 0: total;\r\n}\r\n\r\n/**\r\n * Returns the depth of a route path string.\r\n * \r\n * @param {String} routePathString - The path string to resolve.\r\n * @returns Number;\r\n */\r\nfunction findRoutePathDepth (routePathString:any) {\r\n  return routePathString\r\n          .split('/')\r\n          .filter((pathFragment:any) => { return pathFragment !== ''})\r\n          .length;\r\n}\r\n\r\n/**\r\n * Pauses execution for a specified number of miliseconds.\r\n * @param {Number} timeInMiliseconds - Sleep period\r\n * @returns Promise<any>\r\n */\r\nconst sleep = (timeInMiliseconds:number) => new Promise((resolve) => setTimeout(resolve, timeInMiliseconds))\r\n\r\n/**\r\n * Functional programming utility that passes a series of arguments\r\n * one at a time to a series of functions.\r\n * \r\n * @param {Array<Function>} fns - Functions to receive argument fixtures\r\n * @param {Any} x - The fixed argument to be supplied\r\n * @return {Function} - Receives the fixed argument to be processed.\r\n */\r\nconst pipe = (...fns:Function[]) => (x:any) => fns.reduce((prev, fn) => fn(prev), x)\r\n\r\n/**\r\n * Returns a slug for a given string.\r\n * @param {String} str - String to be slugified.\r\n */\r\nconst slugify = (str:String) => {\r\n  return toSlug(str.toLowerCase(), {remove: /[*+~.()'\"!?:@]/g})\r\n}\r\n\r\nconst bifurcateSlug = (slug:string, index:number) => {\r\n  const slugFragment = slug.substring(0, index);\r\n  const idFragment = slug.substring(index + 1, slug.length);\r\n\r\n  return [slugFragment, idFragment]\r\n}\r\n\r\nconst slugExtractor = (slug:string, cb:Function) => pipe(\r\n  cpm('lastIndexOf', '-'),\r\n  parseInt,\r\n  cb\r\n)(slug)\r\n\r\n/**\r\n * Extracts an id from a given slug.\r\n * @param {String} slug - String to extract id from.\r\n */\r\nconst extractIdFromSlug = (slug:string) => {\r\n  const extractId = (index:number) => bifurcateSlug(slug, index)[1]\r\n  return slugExtractor(slug, extractId)\r\n}\r\n\r\n/**\r\n * Extracts the slug from a given string.\r\n * @param {String} slug - String to extract slug from.\r\n */\r\nconst extractSlugFromString = (slug:string) => {\r\n  const extractSlug = (index:number) => bifurcateSlug(slug, index)[0]\r\n  return slugExtractor(slug, extractSlug)\r\n}\r\n\r\nfunction toTitleCase(str:string) {\r\n  return str.replace(\r\n      /\\w\\S*/g,\r\n      (txt:string) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\r\n  );\r\n}\r\n\r\nexport {\r\n  compose,\r\n  computeModulesProgression,\r\n  extractIdFromSlug,\r\n  extractSlugFromString,\r\n  findRoutePathDepth,\r\n  sleep,\r\n  slugify,\r\n  toTitleCase,\r\n  pipe\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AAEA;AAAA;AAEA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAMA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;;;;;A","sourceRoot":""}