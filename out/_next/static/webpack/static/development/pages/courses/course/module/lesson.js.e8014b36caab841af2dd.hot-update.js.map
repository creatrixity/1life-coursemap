{"version":3,"file":"static/webpack/static\\development\\pages\\courses\\course\\module\\lesson.js.e8014b36caab841af2dd.hot-update.js","sources":["webpack:///./src/Actions/ModuleActions.ts"],"sourcesContent":["'use strict';\r\n\r\nimport { normalize } from 'normalizr';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { EntityActions } from '@Actions'\r\nimport { ActionConsts } from \"@Definations\";\r\nimport { IApi } from \"@Interfaces\";\r\n\r\nimport { moduleSchema } from '@Redux/schema'\r\nimport { sleep } from '../Helpers'\r\n\r\n/**\r\n * ACTIONS\r\n*/\r\nexport const ModuleActions = {\r\n\tMap : (payload:any) => ({\r\n\t\tpayload,\r\n\t\ttype: ActionConsts.Module.SetReducer\r\n\t}),\r\n\r\n\tReset : () => ({\r\n\t\ttype: ActionConsts.Module.ResetReducer\r\n\t}),\r\n\t\r\n\tfetchModuleLessons :(moduleId:number, courseId:number) => {\r\n    return (async (dispatch:Dispatch, {}, api:IApi) => {\r\n\t\t\tdispatch(ModuleActions.Map({ isFetchingCourseModules: true }))\r\n\r\n\t\t\tapi.fetchCourseModules(courseId)\r\n        .then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then(async (response:any) => {\r\n          const {entities: { modules }}= normalize(response, [moduleSchema]);\r\n\r\n\t\t\t\t\tdispatch(EntityActions.Map({ modules }))\r\n\r\n\t\t\t\t\tdispatch(ModuleActions.Map({ isFetchingModules: false }))\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n\t},\r\n\t\r\n\tfetchCourseModuleLessonView: ({ courseSlug, moduleSlug, lessonId }:\r\n\t\t{courseSlug:string, moduleSlug:string, lessonId?:number}, cb:Function) => {\r\n    return (async (dispatch:Dispatch, {}, api:IApi) => {\r\n\t\t\tdispatch(ModuleActions.Map({ isFetchingCourseModuleLessonView: true }))\r\n\r\n\t\t\tapi.fetchCourseModuleLessonView({ courseSlug, moduleSlug, lessonId })\r\n\t\t\t\t.then(api.checkStatus)\r\n\t\t\t\t.then(api.toText)\r\n        .then((response:any) => {\r\n\t\t\t\t\tdispatch(ModuleActions.Map({ isFetchingCourseModuleLessonView: false }))\r\n\t\t\t\t\tcb(response)\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n\t},\r\n\t\r\n\tfetchCourseModuleLessons: ({ moduleId }:{moduleId:number}) => {\r\n    return (async (dispatch:Dispatch, getState:any, api:IApi) => {\r\n\t\t\tdispatch(ModuleActions.Map({ isFetchingCourseModuleLessons: true }))\r\n\t\t\treturn api.fetchLessonsByModuleId({ moduleId })\r\n\t\t\t\t.then(api.checkStatus)\r\n\t\t\t\t.then(api.toJSON)\r\n        .then((response:any) => {\r\n          const {entities: {modules}}= normalize(response[0], moduleSchema);\r\n\r\n\t\t\t\t\tdispatch(EntityActions.Map({ modules: {\r\n\t\t\t\t\t\t...getState().entities.modules,\r\n\t\t\t\t\t\t...modules\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}))\r\n\t\t\t\t\tdispatch(ModuleActions.Map({ isFetchingCourseModuleLessons: false }))\r\n        })\r\n        .catch(() => api.errorHandler(dispatch))\r\n    })\r\n  },\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AACA;AAGA;AACA;AAGA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAUA;AAAA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAYA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAGA;AAAA;AACA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAiBA;AA9DA;;;;A","sourceRoot":""}